interview_experiences,metadata.url,metadata.scraped_at,metadata.source,basic_info.title,basic_info.difficulty,basic_info.accuracy,basic_info.submissions,basic_info.avg_time,content.problem,complexity.time_complexity,complexity.space_complexity,tags.company_tags,tags.topic_tags
[],https://www.geeksforgeeks.org/problems/earliest-common-slot/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:24:27.122086,GeeksforGeeks,Earliest Common Slot,Medium,34.84%,624+,Not available,"You are given two lists of availability time slots, slots1 and slots2, for two people. Each slot is represented as [start, end], and it is gurranted that within each list, no two slots overlap (i.e., for any two intervals, either start1>end2 or start2>end1). Given a metting duration d, return the earliest common time slot of length of least d. If no such slot exits, return an empty array.
Examples:
Input: slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 8
Output: [60,68]
Explanation: The only overlap is [60,70] (10 minutes), which is enough for an 8-minute meeting, so answer is [60,68]
Input: slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 12
Output: []
Explanation: The only overlap is [60, 70] (10 minutes), but 12 minutes are needed, so no valid slot exists.
Constraints:
1 ≤ slots1.size(), slots2.size()  ≤ 105
-109 ≤ slots1[i], slots2[i] ≤ 109
1 ≤ d ≤ 106","O(max(n log(n), m log(m)))",O(1),"['Amazon', 'Microsoft', 'PayPal', 'Google', 'Uber']","['Sorting', 'two-pointer-algorithm', 'Arrays', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/interval-list-intersections/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:24:37.465348,GeeksforGeeks,Interval List Intersections,Medium,44.47%,517+,Not available,"Given two 2-D arrays which represent intervals. Each 2-D array represents a list of intervals. Each list of intervals is disjoint and sorted in increasing order. Find the intersection or set of ranges that are common to both the lists.
Note: Disjoint means no element is common in a list
Examples:
Input: a[][] = [[0, 4], [5, 10], [13, 20], [24, 25]], b[][] = [[1, 5], [8, 12], [15, 24], [25, 26]]
Output: [[1, 4], [5, 5], [8, 10], [15, 20], [24, 24], [25, 25]]
Explanation: [1, 4] lies completely within the range [0, 4] and [1, 5]. Hence, [1, 4] is the desired intersection. Similarly, [24, 24] lies completely within two intervals [24, 25] and [15, 24]
Input: a[][] = [[0, 2], [5, 10], [12, 22], [24, 25]], b[][] = [[1, 4], [9, 12], [15, 24], [25, 26]]
Output: [[1, 2], [9, 10], [12, 12], [15, 22], [24, 24], [25, 25]]
Explanation: [1, 2] lies completely within the range [0, 2] and [1, 4]. Hence, [1, 2] is the desired intersection. Similarly, [12, 12] lies completely within two intervals [12, 22] and [9, 12]
Constraints
1 ≤ a.size(), b.size() ≤ 105
-109 ≤ a[i], b[i] ≤ 109",O(n + m),O(1),"['Bloomberg', 'Amazon', 'Microsoft', 'Google', 'Uber']","['two-pointer-algorithm', 'Arrays', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/bits-counting/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:24:47.992196,GeeksforGeeks,Bits Counting,Medium,77.98%,1K+,Not available,"Given an integer n, return an array ans of size n + 1, where each element i (0 ≤ i ≤ n) represents the count of 1s in the binary form of i.
Examples :
Input: n = 2
Output: [0, 1, 1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Input: n = 5
Output: [0, 1, 1, 2, 1, 2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
Constraints:
0 ≤ n ≤ 105",O(n),O(n),"['Bloomberg', 'Facebook', 'Adobe', 'Google', 'Amazon', 'Microsoft', 'Apple', 'Yahoo', 'Nvidia', 'Uber']","['Bit Magic', 'Dynamic Programming', 'Arrays']"
[],https://www.geeksforgeeks.org/problems/reverse-an-array/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:24:58.563078,GeeksforGeeks,Reverse an Array,Easy,55.32%,189K+,5m,"You are given an array of integers arr[]. Your task is to reverse the given array.
Note: Modify the array in place.
Examples:
Input: arr = [1, 4, 3, 2, 6, 5]
Output: [5, 6, 2, 3, 4, 1]
Explanation: The elements of the array are 1 4 3 2 6 5. After reversing the array, the first element goes to the last position, the second element goes to the second last position and so on. Hence, the answer is 5 6 2 3 4 1.
Input: arr = [4, 5, 2]
Output: [2, 5, 4]
Explanation: The elements of the array are 4 5 2. The reversed array will be 2 5 4.
Input: arr = [1]
Output: [1]
Explanation: The array has only single element, hence the reversed array is same as the original.
Constraints:
1<=arr.size()<=105
0<=arr[i]<=105",O(n),O(1),"['Bloomberg', 'Facebook', 'TCS', 'Adobe', 'Google', 'Infosys', 'Capgemini', 'Morgan Stanley', 'Amazon', 'Microsoft', 'Apple', 'Yahoo', 'PayPal', 'Uber']","['Arrays', 'Data Structures']"
[],https://www.geeksforgeeks.org/problems/buy-stock-2/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:25:09.244361,GeeksforGeeks,Stock Buy and Sell – Max one Transaction Allowed,Easy,49.33%,92K+,10m,"Given an array prices[] of length n, representing the prices of the stocks on different days. The task is to find the maximum profit possible by buying and selling the stocks on different days when at most one transaction is allowed. Here one transaction means 1 buy + 1 Sell. If it is not possible to make a profit then return 0.
Note: Stock must be bought before being sold.
Examples:
Input: prices[] = [7, 10, 1, 3, 6, 9, 2]
Output: 8
Explanation: You can buy the stock on day 2 at price = 1 and sell it on day 5 at price = 9. Hence, the profit is 8.
Input: prices[] = [7, 6, 4, 3, 1]
Output: 0
Explanation: Here the prices are in decreasing order, hence if we buy any day then we cannot sell it at a greater price. Hence, the answer is 0.
Input: prices[] = [1, 3, 6, 9, 11]
Output: 10
Explanation: Since the array is sorted in increasing order, we can make maximum profit by buying at price[0] and selling at price[n-1].
Constraint:
1 <= prices.size()<= 105
0 <= prices[i] <=104",O(n),O(1),"['Bloomberg', 'Facebook', 'Intel', 'Infosys', 'Zoho', 'Morgan Stanley', 'Amazon', 'Microsoft', 'Samsung', 'Yahoo', 'PayPal', 'Nvidia', 'Oracle', 'Visa', 'Walmart', 'Goldman Sachs', 'TCS', 'Adobe', 'Google', 'IBM', 'Accenture', 'Apple', 'Uber']","['Greedy', 'Arrays']"
[],https://www.geeksforgeeks.org/problems/koko-eating-bananas/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:25:19.930390,GeeksforGeeks,Koko Eating Bananas,Medium,50.27%,21K+,20m,"Koko is given an array arr[], where each element represents a pile of bananas. She has exactly k hours to eat all the bananas.
Each hour, Koko can choose one pile and eat up to s bananas from it.
If the pile has at least s bananas, she eats exactly s bananas.
If the pile has fewer than s bananas, she eats the entire pile in that hour.
Koko can only eat from one pile per hour.
Your task is to find the minimum value of s (bananas per hour) such that Koko can finish all the piles within k hours.
Examples:
Input: arr[] = [3, 6, 7, 11] , k = 8
Output: 4
Explanation: Koko eats at least 4 bananas per hour to finish all piles within 8 hours, as she can consume each pile in 1 + 2 + 2 + 3 = 8 hours.
Input: arr[] = [30, 11, 23, 4, 20], k = 5
Output: 30
Explanation: With 30 bananas per hour, Koko completes each pile in 1 hour, totaling 5 hours, which matches k = 5.
Input: arr[] = [5, 10, 15, 20], k = 7
Output: 10
Explanation: At 10 bananas per hour, Koko finishes in 7 hours, just within the k = 7 limit.
Constraint:
1 <= arr.size() <= 105
1 <= arr[i] <= 106
arr.size() <= k <= 106","O(n log m), where m is the max bananas from all piles",O(1),"['Bloomberg', 'Amazon', 'Microsoft', 'Walmart', 'Adobe', 'Arcesium', 'Uber']","['Binary Search', 'Arrays']"
"[{'title': 'Uber Interview Experience On Campus For Internship 2018 19', 'url': 'https://www.geeksforgeeks.org/uber-interview-experience-on-campus-for-internship-2018-19/', 'content_summary': ""Round 1: The first round was an online coding round which consisted of 3 coding questions to be attempted in 90 minutes. Question 1 :- There is a meeting scheduled in an office that lasts for time t and starts at time 0. In between the meeting there are n presentations whose start and end times are given i.e. the ith presentation starts at s[i] and ends at e[i]-1. The presentations do not overlap with each other. You are given k, the maximum number of presentations that you can reschedule keeping the original order intact. Note that the duration of the presentation can't be changed. You can only change the start and end time. Your task is to maximize the longest time period in which there is no presentation scheduled during the meeting. Constraints :- 1<=t<=1, 000, 000, 000 0<=k<=n 1<=n<=100, 000 e[i]<=s[i+1],   0<=i <n-1 s[i] < e[i] for 0<=i<=n-1   Question 2 :- You are given a n x  m grid consisting of values 0 and 1. A value of 1 means that you can enter that cell and 0 implies that entry to that cell is not allowed. You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell. Your task is to calculate the total number of ways of reaching the target. Constraints :- 1<=n, m<=10, 000   Question 3 :- You are given a list of edges in a graph and for each pair of vertices that are connected by an edge, there are two edges between them, one curved edge and one straight edge i.e. the tuple (x, y, w1, w2) means that between vertices x and y, there is a straight edge with weight w1 and a curved edge with weight w2. You are given two vertices a and b and you have to go from a to b through a series of edges such that in the entire path you can use at most 1 curved edge. Your task is to find the shortest path from a to b satisfying the above condition.   Round 2: This was a technical round and lasted for about an hour. I was asked to design a Snakes And Ladder game and code the same in the language of my choice. I used random numbers to design the board and following which I was asked to play the game between two players and I coded the same. He introduced a trick to the question and asked me to rate the difficulty of the board. I thought in terms of the shortest path(Breadth First Search) from start to the end but he said that a better approach would be to calculate the probability of reaching a particular number from the start. So I used Dynamic Programming to calculate the probability of reaching a particular number in x number of moves where 1<=x<=maximum cap on the number of moves following which a tie would be declared. He then asked me that he didn't want a game that would finish in just 15 moves as that would make the game boring. So I was told to  calculate the probability that the game finishes in 15 to  100 moves. Finally he asked me to tell just by looking at the position of the players that who was in the winning position at that moment. He was satisfied by my responses. Round 3: This was a problem solving round and lasted for 75 minutes. He gave me a very complicated question. Here it goes... There are 3 integers a, b, w. There  are 2 equations -\nw+a=b\na (bitwise AND) b =0;\nI was given the value of w and he asked me to calculate the number of pairs (a, b) satisfying the two equations. Assume  that there are no overflows. I used Recursion + Bit Manipulation to solve this and he seemed satisfied with my approach though I required some of his help as well.   P.S.  :- I got a call for an offer 3 hours later.    \n\nComment\nMore info\nAdvertise with us\nNext Article\nUber Interview Experience (On Campus for Internship 2018-19)""}]",https://www.geeksforgeeks.org/problems/shortest-path-using-atmost-one-curved-edge--170647/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:25:30.266245,GeeksforGeeks,Shortest Path Using Atmost One Curved Edge,Hard,59.43%,18K+,Not available,"Given an undirected connected graph of n vertices and list of m edges in a graph and for each pair of vertices that are connected by an edge.
There are two edges between them, one curved edge and one straight edge i.e. the tuple (x, y, w1, w2) means that between vertices x and y, there is a straight edge with weight w1 and a curved edge with weight w2.
You are given two vertices a and b and you have to go from a to b through a series of edges such that in the entire path you can use at most 1 curved edge. Your task is to find the shortest path from a to b satisfying the above condition. If there is no path from a to b, return -1.
Examples
Input: n = 4, m = 4, a = 2, b = 4
edges[][] = [[1, 2, 1, 4], [1, 3, 2, 4],
[1, 4, 3, 1], [2, 4, 6, 5]]
Output: 2
Explanation:
We can follow the path 2 -> 1 -> 4.
This gives a distance of 1+3 = 4 if we follow
all straight paths. But we can take the curved
path from 1 -> 4, which costs 1. This
will result in a cost of 1 + 1 = 2
Input: n = 2, m = 1, a = 1, b = 2
edges = [[1, 2, 4, 1]]
Output : 1
Explanation:
Take the curved path from 1 to 2 which costs 1.
Your Task:
You don't need to read input or print anything. Your task is to complete the function shortestPath() which takes 4 integers n, m, a, and b, and a list of lists named edges of size m as input and returns the cost of shortest path from a to b.
Expected Time Complexity: O((m+n)log(n))
Expected Auxiliary Space: O(n+m)
Constraints:
1 ≤ n,m ≤ 105
1 ≤ a,b ≤ n
weight of edges ≤ 104",Not specified,Not specified,['Uber'],"['Graph', 'Shortest Path', 'Data Structures', 'Algorithms']"
"[{'title': 'Uber Interview Experience On Campus For Internship 2018 19', 'url': 'https://www.geeksforgeeks.org/uber-interview-experience-on-campus-for-internship-2018-19/', 'content_summary': ""Round 1: The first round was an online coding round which consisted of 3 coding questions to be attempted in 90 minutes. Question 1 :- There is a meeting scheduled in an office that lasts for time t and starts at time 0. In between the meeting there are n presentations whose start and end times are given i.e. the ith presentation starts at s[i] and ends at e[i]-1. The presentations do not overlap with each other. You are given k, the maximum number of presentations that you can reschedule keeping the original order intact. Note that the duration of the presentation can't be changed. You can only change the start and end time. Your task is to maximize the longest time period in which there is no presentation scheduled during the meeting. Constraints :- 1<=t<=1, 000, 000, 000 0<=k<=n 1<=n<=100, 000 e[i]<=s[i+1],   0<=i <n-1 s[i] < e[i] for 0<=i<=n-1   Question 2 :- You are given a n x  m grid consisting of values 0 and 1. A value of 1 means that you can enter that cell and 0 implies that entry to that cell is not allowed. You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell. Your task is to calculate the total number of ways of reaching the target. Constraints :- 1<=n, m<=10, 000   Question 3 :- You are given a list of edges in a graph and for each pair of vertices that are connected by an edge, there are two edges between them, one curved edge and one straight edge i.e. the tuple (x, y, w1, w2) means that between vertices x and y, there is a straight edge with weight w1 and a curved edge with weight w2. You are given two vertices a and b and you have to go from a to b through a series of edges such that in the entire path you can use at most 1 curved edge. Your task is to find the shortest path from a to b satisfying the above condition.   Round 2: This was a technical round and lasted for about an hour. I was asked to design a Snakes And Ladder game and code the same in the language of my choice. I used random numbers to design the board and following which I was asked to play the game between two players and I coded the same. He introduced a trick to the question and asked me to rate the difficulty of the board. I thought in terms of the shortest path(Breadth First Search) from start to the end but he said that a better approach would be to calculate the probability of reaching a particular number from the start. So I used Dynamic Programming to calculate the probability of reaching a particular number in x number of moves where 1<=x<=maximum cap on the number of moves following which a tie would be declared. He then asked me that he didn't want a game that would finish in just 15 moves as that would make the game boring. So I was told to  calculate the probability that the game finishes in 15 to  100 moves. Finally he asked me to tell just by looking at the position of the players that who was in the winning position at that moment. He was satisfied by my responses. Round 3: This was a problem solving round and lasted for 75 minutes. He gave me a very complicated question. Here it goes... There are 3 integers a, b, w. There  are 2 equations -\nw+a=b\na (bitwise AND) b =0;\nI was given the value of w and he asked me to calculate the number of pairs (a, b) satisfying the two equations. Assume  that there are no overflows. I used Recursion + Bit Manipulation to solve this and he seemed satisfied with my approach though I required some of his help as well.   P.S.  :- I got a call for an offer 3 hours later.    \n\nComment\nMore info\nAdvertise with us\nNext Article\nUber Interview Experience (On Campus for Internship 2018-19)""}]",https://www.geeksforgeeks.org/problems/unique-paths-in-a-grid--170647/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:25:44.379764,GeeksforGeeks,Unique Paths in a Grid,Medium,50.47%,53K+,Not available,"You are given a 2d list grid[][] of size n x m consisting of values 0 and 1.
A value of 0 means that you can enter that cell and 1 implies that entry to that cell is not allowed.
You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell.
Your task is to calculate the total number of ways of reaching the target.
Note: The first (1, 1) and last (n, m) cell of the grid can also be 1.
It is guaranteed that the total number of ways will fit within a 32-bit integer.
Examples:
Input: n = 3, m = 3,
grid[][] = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]
Output: 2
Explanation: There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Input: n = 1, m = 3,
grid[][] = [[1, 0, 1]]
Output: 0
Explanation: There is no possible path to reach the end.
Constraints:
1 ≤ n*m ≤ 106",O(n * m),O(n * m),['Uber'],"['Dynamic Programming', 'Matrix', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/3-sum-closest/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:25:56.862731,GeeksforGeeks,3 Sum Closest,Medium,49.69%,22K+,Not available,"Given an array arr[] and an integer target, the task is to find the sum of three integers in arr[] such that the sum is closest to target.
Note: If multiple sums are closest to target, return the maximum one.
Examples:
Input: arr[] = [-1, 2, 2, 4], target = 4
Output: 5
Explanation: All possible triplets
[-1, 2, 2], sum = (-1) + 2 + 2 = 3
[-1, 2, 4], sum = (-1) + 2 + 4 = 5
[-1, 2, 4], sum = (-1) + 2 + 4 = 5
[2, 2, 4], sum = 2 + 2 + 4 = 8
Triplet [-1, 2, 2], [-1, 2, 4] and [-1, 2, 4] have sum closest to target, so return the maximum one, that is 5.
Input: arr[] = [1, 10, 4, 5], target = 10
Output: 10
Explanation: All possible triplets
[1, 10, 4], sum = (1 + 10 + 4) = 15
[1, 10, 5], sum = (1 + 10 + 5) = 16
[1, 4, 5], sum = (1 + 4 + 5) = 10
[10, 4, 5], sum = (10 + 4 + 5) = 19
Triplet [1, 4, 5] has sum = 10 which is closest to target.
Constraints:
3 <= arr.size() <= 103
-103 ≤ arr[i] ≤ 103
-104 ≤ target ≤ 104",O(n^2),O(1),"['Amazon', 'Microsoft', 'Adobe', 'Google', 'Zoho', 'Uber', 'Facebook']","['Sorting', 'two-pointer-algorithm', 'Arrays']"
"[{'title': 'Goldman Sachs Interview Experience Set 32 Campus', 'url': 'https://www.geeksforgeeks.org/goldman-sachs-interview-experience-set-32-campus/', 'content_summary': 'Goldman Sachs conducted on campus hiring for tech interns in our campus. CGPA cutoff: 7.0 Branches Eligible: All circuital branches\nOnline Round:\nAn online round was conducted on hackerrank. The duration of the test was 90 minutes. There were 5 MCQs ( 10 marks each, -3 negative marking) and two coding questions( one 35 marks, and the other 15 marks) MCQs were based on the concepts of Data Structures and Algorithms. Proper in- depth knowledge was required to solve these MCQs. Coding questions: 1. Given a string, find the first non repeating character. 2. Given an array, find the number of contiguous subarrays such that the product of the elements of the subarray is less than or equal to a given positive integer k. ( Brute force gave TLE in this question. So proper optimised O(n) complexity solution was required) After the online round, 6 students were shortlisted out of 170 for the personal interviews.\nPersonal Interview Round 1:\n1.) Given a string, print all possible permutations of the characters of that strings. (Had to cover all the edge cases) 2.) What is elastic search. 3.) Modification of the first question, asked to give permuatations containing only 3 characters. Few more questions were asked on graphs.\nPersonal Interview Round 2:\n1.) Find the median of the stream of integers 2.) Talked about my resume and the projects I did 3.) Given a binary tree, check if it is Binary Search Tree without using extra space Few more questions on heaps. This round mostly revolved around trees and heap.\nPersonal Interview Round 3:\n1.) Talked about my Resume 2.) What is JSON 3.) What is REST api 4.) Egg dropping puzzle One more puzzle was asked. I cant recall it now\nPersonal Interview Round 4:\n1.) Discussed questions of the first online test( conducted on hacker rank) 2.) Questions on probability and statistics Few more HR questions Finally , two students were selected for the internship.\n\nComment\nMore info\nAdvertise with us\nNext Article\nGoldman Sachs Interview Experience | Set 32 (On campus)'}]",https://www.geeksforgeeks.org/problems/count-the-subarrays-having-product-less-than-k1708/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:26:07.296013,GeeksforGeeks,Subarrays Product Less than K,Medium,21.0%,107K+,Not available,"Given an array of positive numbers, the task is to find the number of possible contiguous subarrays having product less than a given number k.
Example 1:
Input :
n = 4, k = 10
a[] = [1, 2, 3, 4]
Output :
7
Explanation:
The contiguous subarrays are {1}, {2}, {3}, {4}
{1, 2}, {1, 2, 3} and {2, 3}, in all these subarrays
product of elements is less than 10, count of
such subarray is 7.
{2,3,4} will not be a valid subarray, because
2*3*4=24 which is greater than 10.
Example 2:
Input:
n = 7 , k = 100
a[] = [1, 9, 2, 8, 6, 4, 3]
Output:
16
Your Task:
You don't need to read input or print anything. Your task is to complete the function countSubArrayProductLessThanK() which takes the array a[], its size n and an integer k as inputs and returns the count of required subarrays.
Constraints:
1<=n<=106
1<=k<=1015
1<=a[i]<=105",O(n),O(1),"['Goldman Sachs', 'Facebook', 'Walmart', 'Yatra.com', 'Amazon', 'Linkedin', 'Microsoft', 'Uber']","['Arrays', 'Data Structures', 'Algorithms', 'sliding-window']"
[],https://www.geeksforgeeks.org/problems/roman-number-to-integer3201/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:26:22.992813,GeeksforGeeks,Roman Number to Integer,Easy,43.31%,187K+,20m,"Given a string in Roman number format (s), your task is to convert it to an integer. Various symbols and their values are given below.
Note: I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, M = 1000
Examples:
Input: s = ""IX""
Output: 9
Explanation: IX is a Roman symbol which represents 10 – 1 = 9.
Input: s = ""XL""
Output: 40
Explanation: XL is a Roman symbol which represents 50 – 10 = 40.
Input: s = ""MCMIV""
Output: 1904
Explanation: M is 1000, CM is 1000 – 100 = 900, and IV is 4. So we have total as 1000 + 900 + 4 = 1904.
Constraints:
1<= roman number <=3999
s[i] belongs to [I, V, X, L, C, D, M]",O(n),O(1),"['Zoho', 'Amazon', 'Microsoft', 'Facebook', 'Twitter', 'Uber']","['Strings', 'Data Structures']"
"[{'title': 'Amazon Interview Experience On Campus For Sde 1 5', 'url': 'https://www.geeksforgeeks.org/amazon-interview-experience-on-campus-for-sde-1-5/', 'content_summary': 'There were totally 5 rounds,(1 online coding Test+3 Technical Interviews+1 (managerial-cum-technical  Round))\nRound-1(Online Coding Test)\nThe test was conducted on amazon\'s platform.\nIt had 4 sections:\nCode Debugging (C, C++, Java)[Not sure of python and other languages]. (20 minutes)\nAptitude and Reasoning Ability. (35 minutes)\nWorkstyles Assessment. (20 minutes)\nCoding Round. (70 minutes)\nThe first 3 sections were fairly easy, but one needs to be a tad bit quicker to finish all the questions on time.\nThere were 2 coding questions. Different sets had different questions. links to a few of them are as follows:\nQ1) https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/amp/\nQ2) https://www.geeksforgeeks.org/clone-linked-list-next-arbit-pointer-set-2/\nQ3) https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/  \nQ4) https://leetcode.com/problems/two-sum/\nQ5) https://leetcode.com/problems/critical-connections-in-a-network/\nRound -2(Technical Interview)\nQ1) https://www.geeksforgeeks.org/check-number-can-expressed-sum-consecutive-numbers/\nThe solution given on the above link was not expected, but the interviewer was satisfied \nwith  O(n ^{ 0.5}) approach   \nQ2)https://www.geeksforgeeks.org/print-k-sum-paths-binary-tree/\nRound-3(Technical Interview)\nQ1)The idea was similar to the problem given in the link below, but the question was completely different.\nhttps://www.geeksforgeeks.org/painters-partition-problem/\nQ2)https://stackoverflow.com/questions/28871860/algorithm-to-find-the-maximum-non-adjacent-sum-in-n-ary-tree\nRound-4(Technical Interview)\nQ1)https://www.geeksforgeeks.org/minimum-steps-reach-target-knight/\nA lot of reasonings and variations(like, why BFS, can we do with DFS, if no then why?, its time and space complexity, can we do by using only O(1) memory to keep track of distance, etc ).  \nQ2)As the first question gulped the majority of the time because of its variations and reasoning, he told me that he would ask me a theoretical question.\nSo, first, he asked me to write down all the data structures which I know. And then, to think of real-time applications of each of them.  \nRound-5(Technical-cum-Managerial) \n1)https://www.geeksforgeeks.org/find-rotation-count-rotated-sorted-array/\n2)What would you do if you are stuck in a huge Technical problem? Support your answer with a realtime situation you have faced.\n3) Describe an incident where you were in a difficult situation(professional, not personal) first but then, finally came out of it successfully?\nAnd a few other ""Describe an incident"" Questions were also asked.\n Additional Information\nThe Interviews were conducted on Amazon Chime(A video calling platform).\nCoding questions were asked to code on Amazon\'s LiveCode platform where both the interviewer and the interviewee can simultaneously edit and view the code.\nThe Interviews were of 1 hr each.\n\nTips:\nBe thorough with  Time and space complexity calculation, as it is the first question you might get after proposing an algorithm to the interviewer.\nDon\'t be silent in the interview, keep sharing all your thoughts and budding ideas, it would not only engage the interviewer but also help you to get fresh ideas.\nBe polite and carefully listen to the interviewer(you might be lucky to grab a few clues).\nA big Thank you to GeeksforGeeks for transforming me from a reader to a writer.\n \nComment\nMore info\nAdvertise with us\nNext Article\nAmazon Interview Experience | On-Campus for SDE-1'}]",https://www.geeksforgeeks.org/problems/allocate-minimum-number-of-pages0937/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:26:33.744871,GeeksforGeeks,Allocate Minimum Pages,Medium,35.51%,279K+,35m,"You are given an array arr[] of integers, where each element arr[i] represents the number of pages in the ith book. You also have an integer k representing the number of students. The task is to allocate books to each student such that:
Each student receives atleast one book.
Each student is assigned a contiguous sequence of books.
No book is assigned to more than one student.
The objective is to minimize the maximum number of pages assigned to any student. In other words, out of all possible allocations, find the arrangement where the student who receives the most pages still has the smallest possible maximum.
Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).
Examples:
Input: arr[] = [12, 34, 67, 90], k = 2
Output: 113
Explanation: Allocation can be done in following ways:
[12] and [34, 67, 90] Maximum Pages = 191
[12, 34] and [67, 90] Maximum Pages = 157
[12, 34, 67] and [90] Maximum Pages = 113.
Therefore, the minimum of these cases is 113, which is selected as the output.
Input: arr[] = [15, 17, 20], k = 5
Output: -1
Explanation: Allocation can not be done.
Input: arr[] = [22, 23, 67], k = 1
Output: 112
Constraints:
1 <=  arr.size() <= 106
1 <= arr[i] <= 103
1 <= k <= 103",O(n log n),O(1),"['Infosys', 'Amazon', 'Microsoft', 'Google', 'Codenation', 'Uber']","['Searching', 'Divide and Conquer', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/equilibrium-point-1587115620/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:26:47.294785,GeeksforGeeks,Equilibrium Point,Easy,28.13%,642K+,15m,"Given an array of integers arr[], the task is to find the first equilibrium point in the array.
The equilibrium point in an array is an index (0-based indexing) such that the sum of all elements before that index is the same as the sum of elements after it. Return -1 if no such point exists.
Examples:
Input: arr[] = [1, 2, 0, 3]
Output: 2
Explanation: The sum of left of index 2 is 1 + 2 = 3 and sum on right of index 2 is 3.
Input: arr[] = [1, 1, 1, 1]
Output: -1
Explanation: There is no equilibrium index in the array.
Input: arr[] = [-7, 1, 5, 2, -4, 3, 0]
Output: 3
Explanation: The sum of left of index 3 is -7 + 1 + 5 = -1 and sum on right of index 3 is -4 + 3 + 0 = -1.
Constraints:
3 <= arr.size() <= 105
-104 <= arr[i] <= 104",O(n),O(1),"['Amazon', 'Adobe', 'Google', 'Facebook', 'Microsoft', 'Uber']","['prefix-sum', 'Arrays', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/find-nth-element-of-spiral-matrix/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:26:58.386776,GeeksforGeeks,Find kth element of spiral matrix,Medium,50.66%,53K+,20m,"Given a matrix with n rows and m columns. Your task is to find the kth element which is obtained while traversing the matrix spirally. You need to complete the method findK which takes four arguments the first argument is the matrix A and the next two arguments will be n and m denoting the size of the matrix A and then the forth argument is an integer k. The function will return the kth element obtained while traversing the matrix spirally.
Example 1:
Input:
n = 4, m = 4, k = 10
A[][] = {{1 2 3 4},
{5 6 7 8},
{9 10 11 12},
{13 14 15 16}}
Output:
13
Explanation:
The spiral order of matrix will look like 1->2->3->4->8->12->16->15->14->13->9->5->6->7->11->10. So the 10th element in this order is 13.
Example 2:
Input:
n = 3, m = 3, k = 4
A[][] = {{1 2 3},
{4 5 6},
{7 8 9}}
Output:
6
Explanation:
The spiral order of matrix will look like 1->2->3->6->9->8->7->4->5. So the 4th element in this order is 6.
Your Task:
You only need to implement the given function findK(). Do not read input, instead use the arguments given in the function. Return the K'th element obtained by traversing matrix spirally.
Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)
Constraints:
1<=n,m<=103
1<=k<=n*m
-109 <= A[i][j] <= 109",Not specified,Not specified,"['Amazon', 'Bloomberg', 'Facebook', 'Microsoft', 'Uber']","['Matrix', 'Data Structures']"
[],https://www.geeksforgeeks.org/problems/earliest-common-slot/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:27:09.409232,GeeksforGeeks,Earliest Common Slot,Medium,34.84%,624+,Not available,"You are given two lists of availability time slots, slots1 and slots2, for two people. Each slot is represented as [start, end], and it is gurranted that within each list, no two slots overlap (i.e., for any two intervals, either start1>end2 or start2>end1). Given a metting duration d, return the earliest common time slot of length of least d. If no such slot exits, return an empty array.
Examples:
Input: slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 8
Output: [60,68]
Explanation: The only overlap is [60,70] (10 minutes), which is enough for an 8-minute meeting, so answer is [60,68]
Input: slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 12
Output: []
Explanation: The only overlap is [60, 70] (10 minutes), but 12 minutes are needed, so no valid slot exists.
Constraints:
1 ≤ slots1.size(), slots2.size()  ≤ 105
-109 ≤ slots1[i], slots2[i] ≤ 109
1 ≤ d ≤ 106","O(max(n log(n), m log(m)))",O(1),"['Amazon', 'Microsoft', 'PayPal', 'Google', 'Uber']","['Sorting', 'two-pointer-algorithm', 'Arrays', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/interval-list-intersections/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:27:20.279843,GeeksforGeeks,Interval List Intersections,Medium,44.47%,517+,Not available,"Given two 2-D arrays which represent intervals. Each 2-D array represents a list of intervals. Each list of intervals is disjoint and sorted in increasing order. Find the intersection or set of ranges that are common to both the lists.
Note: Disjoint means no element is common in a list
Examples:
Input: a[][] = [[0, 4], [5, 10], [13, 20], [24, 25]], b[][] = [[1, 5], [8, 12], [15, 24], [25, 26]]
Output: [[1, 4], [5, 5], [8, 10], [15, 20], [24, 24], [25, 25]]
Explanation: [1, 4] lies completely within the range [0, 4] and [1, 5]. Hence, [1, 4] is the desired intersection. Similarly, [24, 24] lies completely within two intervals [24, 25] and [15, 24]
Input: a[][] = [[0, 2], [5, 10], [12, 22], [24, 25]], b[][] = [[1, 4], [9, 12], [15, 24], [25, 26]]
Output: [[1, 2], [9, 10], [12, 12], [15, 22], [24, 24], [25, 25]]
Explanation: [1, 2] lies completely within the range [0, 2] and [1, 4]. Hence, [1, 2] is the desired intersection. Similarly, [12, 12] lies completely within two intervals [12, 22] and [9, 12]
Constraints
1 ≤ a.size(), b.size() ≤ 105
-109 ≤ a[i], b[i] ≤ 109",O(n + m),O(1),"['Bloomberg', 'Amazon', 'Microsoft', 'Google', 'Uber']","['two-pointer-algorithm', 'Arrays', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/bits-counting/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:27:30.773206,GeeksforGeeks,Bits Counting,Medium,77.98%,1K+,Not available,"Given an integer n, return an array ans of size n + 1, where each element i (0 ≤ i ≤ n) represents the count of 1s in the binary form of i.
Examples :
Input: n = 2
Output: [0, 1, 1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Input: n = 5
Output: [0, 1, 1, 2, 1, 2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
Constraints:
0 ≤ n ≤ 105",O(n),O(n),"['Bloomberg', 'Facebook', 'Adobe', 'Google', 'Amazon', 'Microsoft', 'Apple', 'Yahoo', 'Nvidia', 'Uber']","['Bit Magic', 'Dynamic Programming', 'Arrays']"
[],https://www.geeksforgeeks.org/problems/reverse-an-array/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:27:42.021364,GeeksforGeeks,Reverse an Array,Easy,55.32%,189K+,5m,"You are given an array of integers arr[]. Your task is to reverse the given array.
Note: Modify the array in place.
Examples:
Input: arr = [1, 4, 3, 2, 6, 5]
Output: [5, 6, 2, 3, 4, 1]
Explanation: The elements of the array are 1 4 3 2 6 5. After reversing the array, the first element goes to the last position, the second element goes to the second last position and so on. Hence, the answer is 5 6 2 3 4 1.
Input: arr = [4, 5, 2]
Output: [2, 5, 4]
Explanation: The elements of the array are 4 5 2. The reversed array will be 2 5 4.
Input: arr = [1]
Output: [1]
Explanation: The array has only single element, hence the reversed array is same as the original.
Constraints:
1<=arr.size()<=105
0<=arr[i]<=105",O(n),O(1),"['Bloomberg', 'Facebook', 'TCS', 'Adobe', 'Google', 'Infosys', 'Capgemini', 'Morgan Stanley', 'Amazon', 'Microsoft', 'Apple', 'Yahoo', 'PayPal', 'Uber']","['Arrays', 'Data Structures']"
[],https://www.geeksforgeeks.org/problems/buy-stock-2/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:27:52.970688,GeeksforGeeks,Stock Buy and Sell – Max one Transaction Allowed,Easy,49.33%,92K+,10m,"Given an array prices[] of length n, representing the prices of the stocks on different days. The task is to find the maximum profit possible by buying and selling the stocks on different days when at most one transaction is allowed. Here one transaction means 1 buy + 1 Sell. If it is not possible to make a profit then return 0.
Note: Stock must be bought before being sold.
Examples:
Input: prices[] = [7, 10, 1, 3, 6, 9, 2]
Output: 8
Explanation: You can buy the stock on day 2 at price = 1 and sell it on day 5 at price = 9. Hence, the profit is 8.
Input: prices[] = [7, 6, 4, 3, 1]
Output: 0
Explanation: Here the prices are in decreasing order, hence if we buy any day then we cannot sell it at a greater price. Hence, the answer is 0.
Input: prices[] = [1, 3, 6, 9, 11]
Output: 10
Explanation: Since the array is sorted in increasing order, we can make maximum profit by buying at price[0] and selling at price[n-1].
Constraint:
1 <= prices.size()<= 105
0 <= prices[i] <=104",O(n),O(1),"['Bloomberg', 'Facebook', 'Intel', 'Infosys', 'Zoho', 'Morgan Stanley', 'Amazon', 'Microsoft', 'Samsung', 'Yahoo', 'PayPal', 'Nvidia', 'Oracle', 'Visa', 'Walmart', 'Goldman Sachs', 'TCS', 'Adobe', 'Google', 'IBM', 'Accenture', 'Apple', 'Uber']","['Greedy', 'Arrays']"
[],https://www.geeksforgeeks.org/problems/koko-eating-bananas/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:28:03.910165,GeeksforGeeks,Koko Eating Bananas,Medium,50.27%,21K+,20m,"Koko is given an array arr[], where each element represents a pile of bananas. She has exactly k hours to eat all the bananas.
Each hour, Koko can choose one pile and eat up to s bananas from it.
If the pile has at least s bananas, she eats exactly s bananas.
If the pile has fewer than s bananas, she eats the entire pile in that hour.
Koko can only eat from one pile per hour.
Your task is to find the minimum value of s (bananas per hour) such that Koko can finish all the piles within k hours.
Examples:
Input: arr[] = [3, 6, 7, 11] , k = 8
Output: 4
Explanation: Koko eats at least 4 bananas per hour to finish all piles within 8 hours, as she can consume each pile in 1 + 2 + 2 + 3 = 8 hours.
Input: arr[] = [30, 11, 23, 4, 20], k = 5
Output: 30
Explanation: With 30 bananas per hour, Koko completes each pile in 1 hour, totaling 5 hours, which matches k = 5.
Input: arr[] = [5, 10, 15, 20], k = 7
Output: 10
Explanation: At 10 bananas per hour, Koko finishes in 7 hours, just within the k = 7 limit.
Constraint:
1 <= arr.size() <= 105
1 <= arr[i] <= 106
arr.size() <= k <= 106","O(n log m), where m is the max bananas from all piles",O(1),"['Bloomberg', 'Amazon', 'Microsoft', 'Walmart', 'Adobe', 'Arcesium', 'Uber']","['Binary Search', 'Arrays']"
"[{'title': 'Uber Interview Experience On Campus For Internship 2018 19', 'url': 'https://www.geeksforgeeks.org/uber-interview-experience-on-campus-for-internship-2018-19/', 'content_summary': ""Round 1: The first round was an online coding round which consisted of 3 coding questions to be attempted in 90 minutes. Question 1 :- There is a meeting scheduled in an office that lasts for time t and starts at time 0. In between the meeting there are n presentations whose start and end times are given i.e. the ith presentation starts at s[i] and ends at e[i]-1. The presentations do not overlap with each other. You are given k, the maximum number of presentations that you can reschedule keeping the original order intact. Note that the duration of the presentation can't be changed. You can only change the start and end time. Your task is to maximize the longest time period in which there is no presentation scheduled during the meeting. Constraints :- 1<=t<=1, 000, 000, 000 0<=k<=n 1<=n<=100, 000 e[i]<=s[i+1],   0<=i <n-1 s[i] < e[i] for 0<=i<=n-1   Question 2 :- You are given a n x  m grid consisting of values 0 and 1. A value of 1 means that you can enter that cell and 0 implies that entry to that cell is not allowed. You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell. Your task is to calculate the total number of ways of reaching the target. Constraints :- 1<=n, m<=10, 000   Question 3 :- You are given a list of edges in a graph and for each pair of vertices that are connected by an edge, there are two edges between them, one curved edge and one straight edge i.e. the tuple (x, y, w1, w2) means that between vertices x and y, there is a straight edge with weight w1 and a curved edge with weight w2. You are given two vertices a and b and you have to go from a to b through a series of edges such that in the entire path you can use at most 1 curved edge. Your task is to find the shortest path from a to b satisfying the above condition.   Round 2: This was a technical round and lasted for about an hour. I was asked to design a Snakes And Ladder game and code the same in the language of my choice. I used random numbers to design the board and following which I was asked to play the game between two players and I coded the same. He introduced a trick to the question and asked me to rate the difficulty of the board. I thought in terms of the shortest path(Breadth First Search) from start to the end but he said that a better approach would be to calculate the probability of reaching a particular number from the start. So I used Dynamic Programming to calculate the probability of reaching a particular number in x number of moves where 1<=x<=maximum cap on the number of moves following which a tie would be declared. He then asked me that he didn't want a game that would finish in just 15 moves as that would make the game boring. So I was told to  calculate the probability that the game finishes in 15 to  100 moves. Finally he asked me to tell just by looking at the position of the players that who was in the winning position at that moment. He was satisfied by my responses. Round 3: This was a problem solving round and lasted for 75 minutes. He gave me a very complicated question. Here it goes... There are 3 integers a, b, w. There  are 2 equations -\nw+a=b\na (bitwise AND) b =0;\nI was given the value of w and he asked me to calculate the number of pairs (a, b) satisfying the two equations. Assume  that there are no overflows. I used Recursion + Bit Manipulation to solve this and he seemed satisfied with my approach though I required some of his help as well.   P.S.  :- I got a call for an offer 3 hours later.    \n\nComment\nMore info\nAdvertise with us\nNext Article\nUber Interview Experience (On Campus for Internship 2018-19)""}]",https://www.geeksforgeeks.org/problems/shortest-path-using-atmost-one-curved-edge--170647/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:28:14.500329,GeeksforGeeks,Shortest Path Using Atmost One Curved Edge,Hard,59.43%,18K+,Not available,"Given an undirected connected graph of n vertices and list of m edges in a graph and for each pair of vertices that are connected by an edge.
There are two edges between them, one curved edge and one straight edge i.e. the tuple (x, y, w1, w2) means that between vertices x and y, there is a straight edge with weight w1 and a curved edge with weight w2.
You are given two vertices a and b and you have to go from a to b through a series of edges such that in the entire path you can use at most 1 curved edge. Your task is to find the shortest path from a to b satisfying the above condition. If there is no path from a to b, return -1.
Examples
Input: n = 4, m = 4, a = 2, b = 4
edges[][] = [[1, 2, 1, 4], [1, 3, 2, 4],
[1, 4, 3, 1], [2, 4, 6, 5]]
Output: 2
Explanation:
We can follow the path 2 -> 1 -> 4.
This gives a distance of 1+3 = 4 if we follow
all straight paths. But we can take the curved
path from 1 -> 4, which costs 1. This
will result in a cost of 1 + 1 = 2
Input: n = 2, m = 1, a = 1, b = 2
edges = [[1, 2, 4, 1]]
Output : 1
Explanation:
Take the curved path from 1 to 2 which costs 1.
Your Task:
You don't need to read input or print anything. Your task is to complete the function shortestPath() which takes 4 integers n, m, a, and b, and a list of lists named edges of size m as input and returns the cost of shortest path from a to b.
Expected Time Complexity: O((m+n)log(n))
Expected Auxiliary Space: O(n+m)
Constraints:
1 ≤ n,m ≤ 105
1 ≤ a,b ≤ n
weight of edges ≤ 104",Not specified,Not specified,['Uber'],"['Graph', 'Shortest Path', 'Data Structures', 'Algorithms']"
"[{'title': 'Uber Interview Experience On Campus For Internship 2018 19', 'url': 'https://www.geeksforgeeks.org/uber-interview-experience-on-campus-for-internship-2018-19/', 'content_summary': ""Round 1: The first round was an online coding round which consisted of 3 coding questions to be attempted in 90 minutes. Question 1 :- There is a meeting scheduled in an office that lasts for time t and starts at time 0. In between the meeting there are n presentations whose start and end times are given i.e. the ith presentation starts at s[i] and ends at e[i]-1. The presentations do not overlap with each other. You are given k, the maximum number of presentations that you can reschedule keeping the original order intact. Note that the duration of the presentation can't be changed. You can only change the start and end time. Your task is to maximize the longest time period in which there is no presentation scheduled during the meeting. Constraints :- 1<=t<=1, 000, 000, 000 0<=k<=n 1<=n<=100, 000 e[i]<=s[i+1],   0<=i <n-1 s[i] < e[i] for 0<=i<=n-1   Question 2 :- You are given a n x  m grid consisting of values 0 and 1. A value of 1 means that you can enter that cell and 0 implies that entry to that cell is not allowed. You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell. Your task is to calculate the total number of ways of reaching the target. Constraints :- 1<=n, m<=10, 000   Question 3 :- You are given a list of edges in a graph and for each pair of vertices that are connected by an edge, there are two edges between them, one curved edge and one straight edge i.e. the tuple (x, y, w1, w2) means that between vertices x and y, there is a straight edge with weight w1 and a curved edge with weight w2. You are given two vertices a and b and you have to go from a to b through a series of edges such that in the entire path you can use at most 1 curved edge. Your task is to find the shortest path from a to b satisfying the above condition.   Round 2: This was a technical round and lasted for about an hour. I was asked to design a Snakes And Ladder game and code the same in the language of my choice. I used random numbers to design the board and following which I was asked to play the game between two players and I coded the same. He introduced a trick to the question and asked me to rate the difficulty of the board. I thought in terms of the shortest path(Breadth First Search) from start to the end but he said that a better approach would be to calculate the probability of reaching a particular number from the start. So I used Dynamic Programming to calculate the probability of reaching a particular number in x number of moves where 1<=x<=maximum cap on the number of moves following which a tie would be declared. He then asked me that he didn't want a game that would finish in just 15 moves as that would make the game boring. So I was told to  calculate the probability that the game finishes in 15 to  100 moves. Finally he asked me to tell just by looking at the position of the players that who was in the winning position at that moment. He was satisfied by my responses. Round 3: This was a problem solving round and lasted for 75 minutes. He gave me a very complicated question. Here it goes... There are 3 integers a, b, w. There  are 2 equations -\nw+a=b\na (bitwise AND) b =0;\nI was given the value of w and he asked me to calculate the number of pairs (a, b) satisfying the two equations. Assume  that there are no overflows. I used Recursion + Bit Manipulation to solve this and he seemed satisfied with my approach though I required some of his help as well.   P.S.  :- I got a call for an offer 3 hours later.    \n\nComment\nMore info\nAdvertise with us\nNext Article\nUber Interview Experience (On Campus for Internship 2018-19)""}]",https://www.geeksforgeeks.org/problems/unique-paths-in-a-grid--170647/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:28:28.604803,GeeksforGeeks,Unique Paths in a Grid,Medium,50.47%,53K+,Not available,"You are given a 2d list grid[][] of size n x m consisting of values 0 and 1.
A value of 0 means that you can enter that cell and 1 implies that entry to that cell is not allowed.
You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell.
Your task is to calculate the total number of ways of reaching the target.
Note: The first (1, 1) and last (n, m) cell of the grid can also be 1.
It is guaranteed that the total number of ways will fit within a 32-bit integer.
Examples:
Input: n = 3, m = 3,
grid[][] = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]
Output: 2
Explanation: There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Input: n = 1, m = 3,
grid[][] = [[1, 0, 1]]
Output: 0
Explanation: There is no possible path to reach the end.
Constraints:
1 ≤ n*m ≤ 106",O(n * m),O(n * m),['Uber'],"['Dynamic Programming', 'Matrix', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/3-sum-closest/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:28:41.713289,GeeksforGeeks,3 Sum Closest,Medium,49.69%,22K+,Not available,"Given an array arr[] and an integer target, the task is to find the sum of three integers in arr[] such that the sum is closest to target.
Note: If multiple sums are closest to target, return the maximum one.
Examples:
Input: arr[] = [-1, 2, 2, 4], target = 4
Output: 5
Explanation: All possible triplets
[-1, 2, 2], sum = (-1) + 2 + 2 = 3
[-1, 2, 4], sum = (-1) + 2 + 4 = 5
[-1, 2, 4], sum = (-1) + 2 + 4 = 5
[2, 2, 4], sum = 2 + 2 + 4 = 8
Triplet [-1, 2, 2], [-1, 2, 4] and [-1, 2, 4] have sum closest to target, so return the maximum one, that is 5.
Input: arr[] = [1, 10, 4, 5], target = 10
Output: 10
Explanation: All possible triplets
[1, 10, 4], sum = (1 + 10 + 4) = 15
[1, 10, 5], sum = (1 + 10 + 5) = 16
[1, 4, 5], sum = (1 + 4 + 5) = 10
[10, 4, 5], sum = (10 + 4 + 5) = 19
Triplet [1, 4, 5] has sum = 10 which is closest to target.
Constraints:
3 <= arr.size() <= 103
-103 ≤ arr[i] ≤ 103
-104 ≤ target ≤ 104",O(n^2),O(1),"['Amazon', 'Microsoft', 'Adobe', 'Google', 'Zoho', 'Uber', 'Facebook']","['Sorting', 'two-pointer-algorithm', 'Arrays']"
"[{'title': 'Goldman Sachs Interview Experience Set 32 Campus', 'url': 'https://www.geeksforgeeks.org/goldman-sachs-interview-experience-set-32-campus/', 'content_summary': 'Goldman Sachs conducted on campus hiring for tech interns in our campus. CGPA cutoff: 7.0 Branches Eligible: All circuital branches\nOnline Round:\nAn online round was conducted on hackerrank. The duration of the test was 90 minutes. There were 5 MCQs ( 10 marks each, -3 negative marking) and two coding questions( one 35 marks, and the other 15 marks) MCQs were based on the concepts of Data Structures and Algorithms. Proper in- depth knowledge was required to solve these MCQs. Coding questions: 1. Given a string, find the first non repeating character. 2. Given an array, find the number of contiguous subarrays such that the product of the elements of the subarray is less than or equal to a given positive integer k. ( Brute force gave TLE in this question. So proper optimised O(n) complexity solution was required) After the online round, 6 students were shortlisted out of 170 for the personal interviews.\nPersonal Interview Round 1:\n1.) Given a string, print all possible permutations of the characters of that strings. (Had to cover all the edge cases) 2.) What is elastic search. 3.) Modification of the first question, asked to give permuatations containing only 3 characters. Few more questions were asked on graphs.\nPersonal Interview Round 2:\n1.) Find the median of the stream of integers 2.) Talked about my resume and the projects I did 3.) Given a binary tree, check if it is Binary Search Tree without using extra space Few more questions on heaps. This round mostly revolved around trees and heap.\nPersonal Interview Round 3:\n1.) Talked about my Resume 2.) What is JSON 3.) What is REST api 4.) Egg dropping puzzle One more puzzle was asked. I cant recall it now\nPersonal Interview Round 4:\n1.) Discussed questions of the first online test( conducted on hacker rank) 2.) Questions on probability and statistics Few more HR questions Finally , two students were selected for the internship.\n\nComment\nMore info\nAdvertise with us\nNext Article\nGoldman Sachs Interview Experience | Set 32 (On campus)'}]",https://www.geeksforgeeks.org/problems/count-the-subarrays-having-product-less-than-k1708/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:28:53.216874,GeeksforGeeks,Subarrays Product Less than K,Medium,21.0%,107K+,Not available,"Given an array of positive numbers, the task is to find the number of possible contiguous subarrays having product less than a given number k.
Example 1:
Input :
n = 4, k = 10
a[] = [1, 2, 3, 4]
Output :
7
Explanation:
The contiguous subarrays are {1}, {2}, {3}, {4}
{1, 2}, {1, 2, 3} and {2, 3}, in all these subarrays
product of elements is less than 10, count of
such subarray is 7.
{2,3,4} will not be a valid subarray, because
2*3*4=24 which is greater than 10.
Example 2:
Input:
n = 7 , k = 100
a[] = [1, 9, 2, 8, 6, 4, 3]
Output:
16
Your Task:
You don't need to read input or print anything. Your task is to complete the function countSubArrayProductLessThanK() which takes the array a[], its size n and an integer k as inputs and returns the count of required subarrays.
Constraints:
1<=n<=106
1<=k<=1015
1<=a[i]<=105",Not specified,Not specified,"['Goldman Sachs', 'Facebook', 'Walmart', 'Yatra.com', 'Amazon', 'Linkedin', 'Microsoft', 'Uber']","['Arrays', 'Data Structures', 'Algorithms', 'sliding-window']"
[],https://www.geeksforgeeks.org/problems/roman-number-to-integer3201/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:29:07.015693,GeeksforGeeks,Roman Number to Integer,Easy,43.31%,187K+,Not available,"Given a string in Roman number format (s), your task is to convert it to an integer. Various symbols and their values are given below.
Note: I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, M = 1000
Examples:
Input: s = ""IX""
Output: 9
Explanation: IX is a Roman symbol which represents 10 – 1 = 9.
Input: s = ""XL""
Output: 40
Explanation: XL is a Roman symbol which represents 50 – 10 = 40.
Input: s = ""MCMIV""
Output: 1904
Explanation: M is 1000, CM is 1000 – 100 = 900, and IV is 4. So we have total as 1000 + 900 + 4 = 1904.
Constraints:
1<= roman number <=3999
s[i] belongs to [I, V, X, L, C, D, M]",Not specified,Not specified,"['Zoho', 'Amazon', 'Microsoft', 'Facebook', 'Twitter', 'Uber']","['Strings', 'Data Structures']"
"[{'title': 'Amazon Interview Experience On Campus For Sde 1 5', 'url': 'https://www.geeksforgeeks.org/amazon-interview-experience-on-campus-for-sde-1-5/', 'content_summary': 'There were totally 5 rounds,(1 online coding Test+3 Technical Interviews+1 (managerial-cum-technical  Round))\nRound-1(Online Coding Test)\nThe test was conducted on amazon\'s platform.\nIt had 4 sections:\nCode Debugging (C, C++, Java)[Not sure of python and other languages]. (20 minutes)\nAptitude and Reasoning Ability. (35 minutes)\nWorkstyles Assessment. (20 minutes)\nCoding Round. (70 minutes)\nThe first 3 sections were fairly easy, but one needs to be a tad bit quicker to finish all the questions on time.\nThere were 2 coding questions. Different sets had different questions. links to a few of them are as follows:\nQ1) https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/amp/\nQ2) https://www.geeksforgeeks.org/clone-linked-list-next-arbit-pointer-set-2/\nQ3) https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/  \nQ4) https://leetcode.com/problems/two-sum/\nQ5) https://leetcode.com/problems/critical-connections-in-a-network/\nRound -2(Technical Interview)\nQ1) https://www.geeksforgeeks.org/check-number-can-expressed-sum-consecutive-numbers/\nThe solution given on the above link was not expected, but the interviewer was satisfied \nwith  O(n ^{ 0.5}) approach   \nQ2)https://www.geeksforgeeks.org/print-k-sum-paths-binary-tree/\nRound-3(Technical Interview)\nQ1)The idea was similar to the problem given in the link below, but the question was completely different.\nhttps://www.geeksforgeeks.org/painters-partition-problem/\nQ2)https://stackoverflow.com/questions/28871860/algorithm-to-find-the-maximum-non-adjacent-sum-in-n-ary-tree\nRound-4(Technical Interview)\nQ1)https://www.geeksforgeeks.org/minimum-steps-reach-target-knight/\nA lot of reasonings and variations(like, why BFS, can we do with DFS, if no then why?, its time and space complexity, can we do by using only O(1) memory to keep track of distance, etc ).  \nQ2)As the first question gulped the majority of the time because of its variations and reasoning, he told me that he would ask me a theoretical question.\nSo, first, he asked me to write down all the data structures which I know. And then, to think of real-time applications of each of them.  \nRound-5(Technical-cum-Managerial) \n1)https://www.geeksforgeeks.org/find-rotation-count-rotated-sorted-array/\n2)What would you do if you are stuck in a huge Technical problem? Support your answer with a realtime situation you have faced.\n3) Describe an incident where you were in a difficult situation(professional, not personal) first but then, finally came out of it successfully?\nAnd a few other ""Describe an incident"" Questions were also asked.\n Additional Information\nThe Interviews were conducted on Amazon Chime(A video calling platform).\nCoding questions were asked to code on Amazon\'s LiveCode platform where both the interviewer and the interviewee can simultaneously edit and view the code.\nThe Interviews were of 1 hr each.\n\nTips:\nBe thorough with  Time and space complexity calculation, as it is the first question you might get after proposing an algorithm to the interviewer.\nDon\'t be silent in the interview, keep sharing all your thoughts and budding ideas, it would not only engage the interviewer but also help you to get fresh ideas.\nBe polite and carefully listen to the interviewer(you might be lucky to grab a few clues).\nA big Thank you to GeeksforGeeks for transforming me from a reader to a writer.\n \nComment\nMore info\nAdvertise with us\nNext Article\nAmazon Interview Experience | On-Campus for SDE-1'}]",https://www.geeksforgeeks.org/problems/allocate-minimum-number-of-pages0937/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:29:18.136008,GeeksforGeeks,Allocate Minimum Pages,Medium,35.51%,279K+,Not available,"You are given an array arr[] of integers, where each element arr[i] represents the number of pages in the ith book. You also have an integer k representing the number of students. The task is to allocate books to each student such that:
Each student receives atleast one book.
Each student is assigned a contiguous sequence of books.
No book is assigned to more than one student.
The objective is to minimize the maximum number of pages assigned to any student. In other words, out of all possible allocations, find the arrangement where the student who receives the most pages still has the smallest possible maximum.
Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).
Examples:
Input: arr[] = [12, 34, 67, 90], k = 2
Output: 113
Explanation: Allocation can be done in following ways:
[12] and [34, 67, 90] Maximum Pages = 191
[12, 34] and [67, 90] Maximum Pages = 157
[12, 34, 67] and [90] Maximum Pages = 113.
Therefore, the minimum of these cases is 113, which is selected as the output.
Input: arr[] = [15, 17, 20], k = 5
Output: -1
Explanation: Allocation can not be done.
Input: arr[] = [22, 23, 67], k = 1
Output: 112
Constraints:
1 <=  arr.size() <= 106
1 <= arr[i] <= 103
1 <= k <= 103",Not specified,Not specified,"['Infosys', 'Amazon', 'Microsoft', 'Google', 'Codenation', 'Uber']","['Searching', 'Divide and Conquer', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/equilibrium-point-1587115620/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:29:31.867911,GeeksforGeeks,Equilibrium Point,Easy,28.13%,642K+,Not available,"Given an array of integers arr[], the task is to find the first equilibrium point in the array.
The equilibrium point in an array is an index (0-based indexing) such that the sum of all elements before that index is the same as the sum of elements after it. Return -1 if no such point exists.
Examples:
Input: arr[] = [1, 2, 0, 3]
Output: 2
Explanation: The sum of left of index 2 is 1 + 2 = 3 and sum on right of index 2 is 3.
Input: arr[] = [1, 1, 1, 1]
Output: -1
Explanation: There is no equilibrium index in the array.
Input: arr[] = [-7, 1, 5, 2, -4, 3, 0]
Output: 3
Explanation: The sum of left of index 3 is -7 + 1 + 5 = -1 and sum on right of index 3 is -4 + 3 + 0 = -1.
Constraints:
3 <= arr.size() <= 105
-104 <= arr[i] <= 104",Not specified,Not specified,"['Amazon', 'Adobe', 'Google', 'Facebook', 'Microsoft', 'Uber']","['prefix-sum', 'Arrays', 'Data Structures', 'Algorithms']"
[],https://www.geeksforgeeks.org/problems/find-nth-element-of-spiral-matrix/1?page=1&company=Uber&sortBy=latest,2025-06-11T12:29:42.941177,GeeksforGeeks,Find kth element of spiral matrix,Medium,50.66%,53K+,Not available,"Given a matrix with n rows and m columns. Your task is to find the kth element which is obtained while traversing the matrix spirally. You need to complete the method findK which takes four arguments the first argument is the matrix A and the next two arguments will be n and m denoting the size of the matrix A and then the forth argument is an integer k. The function will return the kth element obtained while traversing the matrix spirally.
Example 1:
Input:
n = 4, m = 4, k = 10
A[][] = {{1 2 3 4},
{5 6 7 8},
{9 10 11 12},
{13 14 15 16}}
Output:
13
Explanation:
The spiral order of matrix will look like 1->2->3->4->8->12->16->15->14->13->9->5->6->7->11->10. So the 10th element in this order is 13.
Example 2:
Input:
n = 3, m = 3, k = 4
A[][] = {{1 2 3},
{4 5 6},
{7 8 9}}
Output:
6
Explanation:
The spiral order of matrix will look like 1->2->3->6->9->8->7->4->5. So the 4th element in this order is 6.
Your Task:
You only need to implement the given function findK(). Do not read input, instead use the arguments given in the function. Return the K'th element obtained by traversing matrix spirally.
Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)
Constraints:
1<=n,m<=103
1<=k<=n*m
-109 <= A[i][j] <= 109",Not specified,Not specified,"['Amazon', 'Bloomberg', 'Facebook', 'Microsoft', 'Uber']","['Matrix', 'Data Structures']"
[],https://www.geeksforgeeks.org/problems/remove-the-balls--170647/1,2025-06-11T12:29:54.279042,GeeksforGeeks,Remove the balls,Medium,58.66%,33K+,Not available,"You are given two arrays, color and radius, representing a sequence of balls:
color[i] is the color of the i-th ball.
radius[i] is the radius of the i-th ball.
If two consecutive balls have the same color and radius, remove them both. Repeat this process until no more such pairs exist.
Return the number of balls remaining after all possible removals.
Examples:
Input: color[] = [2, 3, 5], radius[] = [3, 3, 5]
Output: 3
Explanation: All the 3 balls have different colors and radius.
Input: color[] = [2, 2, 5], radius[] = [3, 3, 5]
Output: 1
Explanation: First ball and second ball have same color 2 and same radius 3. So, after removing only one ball is left. It cannot be removed from the array. Hence, the final array has length 1.
Constraints:
1 ≤ color.size() = radius.size() ≤ 105
1 ≤ color[i] ≤ 109
1 ≤ radius[i] ≤ 109",Not specified,Not specified,[],"['Stack', 'Data Structures']"
